ft245: equ 8
bdos: equ 5
commandlen: equ $80
command: equ $81
fcb: equ $5c

    ; run DOWNLOAD TOFILE.XXX HEXSIZE
.phase $100
    ; command is at address command
    ; if fcb is empty, print help
    ld a,(fcb + 1)
    cp " "
    jp z,showhelp

    ; we have an fcb. now skip filename in command and find size
    ld hl,command
    ld b,0
    ld a,(commandlen)
    ld c,a
    add hl,bc
    ld (hl),0
    ld hl,command + 1
    ld a," "
    cpir
    dec hl
    ; found the space
    ld a,(hl)
    cp " "
    jp nz,showhelp

    call skip_spaces
    xor a
    cp c
    jp z,showhelp

    call parse_hex
    push bc ; size of file

    ld a,b
    ld hl,loading_bytes
    call format_hex_2

    ld a,c
    call format_hex_2

    ld de,loading
    ld c,9
    call bdos

    ; TODO make sure there are no wildcards in filename

    ld c,$13 ; delete file
    ld de,fcb
    call bdos

    ld c,$16 ; create file
    ld de,fcb
    call bdos


    ld hl,$1000
    pop bc
    push bc
next_char:
    in a,(ft245)
    ld (hl),a
    inc hl
    dec bc
    xor a
    cp b
    jp nz,next_char
    cp c
    jp nz,next_char

    ; $1000 now contains the downloaded code


    pop bc
    ld c,0  ; turn bc into pages (possibly 1 page too many)
    srl b
    inc b

    ld hl,$1000
next_block:
    push bc
    ; copy sector to fcb
    ld de,$80
    ld bc,$80
    ldir
    push hl

    ld c,$15 ; write block
    ld de,fcb
    call bdos

    ; copy sector to fcb
    ld de,$80
    ld bc,$80
    pop hl
    ldir
    push hl

    ld c,$15 ; write block
    ld de,fcb
    call bdos

    ; copy sector to fcb
    ld de,$80
    ld bc,$80
    pop hl
    ldir
    push hl

    ld c,$15 ; write block
    ld de,fcb
    call bdos

    ; copy sector to fcb
    ld de,$80
    ld bc,$80
    pop hl
    ldir
    push hl

    ld c,$15 ; write block
    ld de,fcb
    call bdos

    pop hl
    pop bc
    djnz next_block
    pop bc

    ld c,$10 ; close file
    ld de,fcb
    call bdos

    jp 0

loading:
    db "Downloading "
loading_bytes:
    db "xxxx bytes$"



showhelp:
    ld de,help
    ld c,9
    call bdos
    jp 0

help:
    db "Usage:\n"
    db "DOWNLOAD FILENAME SIZE\n"
    db "SIZE is in hex\n$"





; HL = address of 1-4 digits of hex, terminated with null, space or comma
; BC = number
;  E = error code
parse_hex:
.block
    ld bc,0
    ld d,4
parse_next:
    ld a,(hl)
    call to_upper
    cp '0'
    jp c,bad_hex
    cp '9' + 1
    jp nc,not_decimal
    sub '0'
    jp add_digit
not_decimal:
    cp 'A'
    jp c,bad_hex
    cp 'F' + 1
    jp nc,bad_hex
    sub 'A' - 10
add_digit:
    add a,c
    ld c,a
    ld a,b
    adc a,0
    ld b,a

    ld e,0
    inc hl
    xor a
    cp (hl)
    ret z
    ld a,' '
    cp (hl)
    ret z
    ld a,","
    cp (hl)
    ret z

    push hl
    ld h,b
    ld l,c
    add hl,hl
    add hl,hl
    add hl,hl
    add hl,hl
    ld b,h
    ld c,l
    pop hl
    
    dec d
    jp z,bad_hex

    jp parse_next

bad_hex:
    ld e,1
    ret
.endblock

; takes a byte in A and, if it's a-z, returns it in upper case
to_upper:
    cp 'a'
    ret c
    cp 'z' + 1
    ret nc
    sub 'a' - 'A'
    ret

; HL = string
; return HL = string after any skipped spaces
;        C = number of spaces skipped
skip_spaces:
.block
    ld c,0
    ld a,' '
next:
    cp (hl)
    ret nz
    inc hl
    inc c
    jp next
.endblock

; A = number
; HL = address to store formatted number at
; destroys D
; returns with HL pointing to address after formatted number
format_hex_2:
.block
    ld d,2
    push af
    srl a
    srl a
    srl a    
    srl a
next_digit:
    cp 10
    jp c,num
    add a,'A' - '0' - 10
num:
    add a,'0'
    ld (hl),a
    inc hl
    pop af
    and $0f
    dec d
    push af
    jp nz,next_digit
    pop af
    ret
.endblock
