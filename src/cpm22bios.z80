sd_data: equ 10
sd_status: equ 11

cdisk: equ $4


.macro sd_set_cs
    ld a,%%1
    out (sd_status),a   ; set cs to 0
.endm

org $4a00

jp boot
jp wboot
jp const
jp conin
jp conout
jp list
jp punch
jp reader
jp home
jp seldsk
jp settrk
jp setsec
jp setdma
jp read
jp write
jp listst
jp sectran

boot:
    xor a
    ld (iobyte),a
    ld (cdisk),a
    jp gocpm
wboot:
    call init_sd_card
    ret

init_sd_card:
    sd_set_cs 0
    ld b,10
init:
    ld a,$ff
    call sd_write_a
    djnz init

    sd_set_cs 0

    ld hl,cmd0
    call sd_send_command
    ld (response),a

    sd_set_cs 1

    sd_set_cs 0

    ld hl,cmd8
    call sd_send_command
    ld (response),a

    ld b,4
    ld hl,response
    call sd_read_bytes

    sd_set_cs 1

    ; should check responses are correct, in proper sd card driver

send_acmd41:
    sd_set_cs 0
    ld hl,acmd
    call sd_send_command

    ld hl,acmd41
    call sd_send_command
    ld (response),a

    sd_set_cs 1

    ld a,(response)
    cp 0
    jp nz,send_acmd41

    sd_set_cs 0
    ld hl,cmd58
    call sd_send_command

    ld b,4
    ld hl,response
    call sd_read_bytes

    sd_set_cs 1
    ret

const:
    in a,(ft245_status)
    bit 0,a
    jp z,const_ready
    ld a,0
    ret
const_ready:
    ld a,$ff
    ret

conin:
    in a,(ft245_status)
    bit 0,a
    jp nz,read_char
    in a,(ft245)
    res a,7
    ret

conout:
    in a,(ft245_status)
    bit 1,a
    jp nz,conout
    ld a,c
    out (ft245),a
    ret

list:
    ret
punch:
    ret
reader:
    ret
home:
    ret
seldsk:
    ret

settrk:
    ld (track),bc
    ret

setsec:
    ld (sector),bc
    ret

setdma:
    ld (dma_addr),bc
    ret

read:
    ld bc,(sector)
    ld (cmd_read_block + 4),bc
    ld bc,(track)
    ld (cmd_read_block + 3),bc
    ld a,(disk)
    ld (cmd_read_block + 2),a

    sd_set_cs 0
    ld hl,cmd17
    call sd_send_command
wait_for_data:
    ld a,$ff
    call sd_write_a
    in a,(sd_data)
    cp $fe
    jp nz,wait_for_data

    ld b,0
    ; ld hl,block0
    ld hl,buffer
    call sd_read_bytes
    ld b,0
    ; ld hl,block1
    ld hl,buffer + $100
    call sd_read_bytes

    sd_set_cs 1
    ld a,(dma_addr)
    ld d,0
    ld e,a
    ld bc,$80
    ld hl,buffer
    ldir

    ld a,0  ; error code - should really check!!

    ret
write:
    ld bc,(sector)
    ld (cmd_write_block + 4),bc
    ld bc,(track)
    ld (cmd_write_block + 3),bc
    ld a,(disk)
    ld (cmd_write_block + 2),a

    ld a,(dma_addr)
    ld h,0
    ld l,a
    ld bc,$80
    ld de,buffer
    ldir

    sd_set_cs 0
    ld hl,cmd24
    call sd_send_command

    ld a,$fe  ; start block token
    call sd_write_a

    ld b,0
    ld hl,buffer
    call sd_write_bytes

    ld b,0
    ld hl,buffer + $100
    call sd_write_bytes

    call sd_read_response
    ld (response),a

    ld a,0

    ret
listst:
    ret

sectran:
    ld h,b
    ld l,c
    ret

disk: db 0
track: dw 0
sector dw 0
dma_addr: db $80,80

dpb:
    dw $FFFF    ; sectors per track
    db 0        ; block shift factor
    db $FF      ; block mask
    db 0        ; null mask
    dw $FFFF    ; disk size - 1
    dw $FFFF    ; directory max
    db ???      ; alloc 0
    db ???      ; alloc 1
    dw ???      ; check size
    dw 0        ; track size

dpb_disk0:
    dw $0000,$0000
    dw $0000,$0000
    dw dirbf,dpb
    dw chk03,all03

cmd_read_block:  ; read single block
    db $51,0,0,0,0,$01      ; needs a data address
cmd_write_block:  ; write single block
    db $58,0,0,0,0,$01

buffer: ds 256

sd_send_command:
.block
    ld b,6
send_loop:
    ld a,(hl)
    call sd_write_a
    inc hl
    djnz send_loop
    call sd_read_response
    ret
.endblock

sd_write_a:
    out (sd_data),a
    ; fall through to wait_for_ready
sd_wait_for_ready:
    in a,(sd_status)
    bit 2,a
    jp nz,sd_wait_for_ready
    ret

; b = number of bytes to read
; hl = address to store bytes
sd_read_bytes:
    ld a,$ff
    call sd_write_a
    in a,(sd_data)
    ld (hl),a
    inc hl
    djnz sd_read_bytes
    ret

; b = number of bytes to write
; hl = address of bytes to write
sd_write_bytes:
    ld a,(hl)
    call sd_write_a
    inc hl
    djnz sd_write_bytes
    ret

sd_read_response:
    ld a,$ff
    call sd_write_a
    in a,(sd_data)
    bit 7,a
    jp nz,sd_read_response
    ret
