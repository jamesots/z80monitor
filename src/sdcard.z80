sd_data: equ 10
sd_status: equ 11

.macro cs_low
    ld a,0
    out (sd_status),a   ; set cs to 0
.endm

.macro cs_high
    ld a,1
    out (sd_status),a   ; set cs to 1
.endm

.phase $8000
    cs_low
    ld b,10
init:
    ld a,$ff
    call write_a
    djnz init

    cs_low

    ld hl,cmd0
    call send_command
    ld (response),a

    cs_high

    cs_low

    ld hl,cmd8
    call send_command
    ld (response),a

    ld b,4
    ld hl,response
    call read_bytes

    cs_high

    ; should check responses are correct, in proper sd card driver

send_acmd41:
    cs_low
    ld hl,acmd
    call send_command

    ld hl,acmd41
    call send_command
    ld (response),a

    cs_high

    ld a,(response)
    cp 0
    jp nz,send_acmd41

    cs_low
    ld hl,cmd58
    call send_command

    ld b,4
    ld hl,response
    call read_bytes

    cs_high

    cs_low
    ld hl,cmd17
    call send_command

wait_for_data:
    ld a,$ff
    call write_a
    in a,(sd_data)
    cp $fe
    jp nz,wait_for_data

    ld b,0
    ; ld hl,block0
    ld hl,$9000
    call read_bytes
    ld b,0
    ; ld hl,block1
    ld hl,$9100
    call read_bytes

    cs_high

    ; we now have the MBR (if we read sector 0)
    ; my card has the FAT at sector $20

    ret

response:
    db 0,0,0,0,0,0,0,0

block0:
    equ $9000
block1:
    equ $9100

cmd0:
    db $40,0,0,0,0,$95
cmd8:
    db $48,0,0,1,$AA,$87    ; 2.7-3.6V
acmd:
    db $77,0,0,0,0,$01   ; cmd55 - next command is and acmd
acmd41:
    db $69,$40,0,0,0,$01
cmd58:
    db $7A,0,0,0,0,$01

cmd17:  ; read single block
    db $51,0,0,0,$20,$01      ; needs a data address

send_command:
    ld b,6
send_loop:
    ld a,(hl)
    call write_a
    inc hl
    djnz send_loop
    call read_response
    ret

; b = number of bytes to read
; hl = address to store bytes
read_bytes:
    ld a,$ff
    call write_a
    in a,(sd_data)
    ld (hl),a
    inc hl
    djnz read_bytes
    ret

read_response:
    ld a,$ff
    call write_a
    in a,(sd_data)
    bit 7,a
    jp nz,read_response
    ret

write_a:
    out (sd_data),a
    ; fall through to wait_for_ready
wait_for_ready:
    in a,(sd_status)
    bit 2,a
    jp nz,wait_for_ready
    ret
